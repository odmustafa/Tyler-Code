{"ast":null,"code":"/**\n * Fingerprint Service Client\n * Communicates with the Windows fingerprint service running on the local network\n */\n\nclass FingerprintService {\n  constructor() {\n    // Default to localhost, but can be configured for network access\n    this.baseUrl = this.detectFingerprintServiceUrl();\n    this.isConnected = false;\n    this.lastError = null;\n  }\n\n  /**\n   * Detect the fingerprint service URL\n   * Tries localhost first, then attempts to detect network service\n   */\n  detectFingerprintServiceUrl() {\n    // Check if we're running on the same machine as the fingerprint service\n    const hostname = window.location.hostname;\n\n    // If accessing from localhost/127.0.0.1, try localhost first\n    if (hostname === 'localhost' || hostname === '127.0.0.1') {\n      return 'http://localhost:5001';\n    }\n\n    // If accessing from network, try to detect Windows PC IP\n    // This can be configured based on your network setup\n    const possibleIPs = ['http://192.168.1.100:5001',\n    // Common router IP range\n    'http://192.168.0.100:5001',\n    // Alternative router IP range\n    'http://10.0.0.100:5001',\n    // Another common range\n    'http://localhost:5001' // Fallback to localhost\n    ];\n\n    // For now, return localhost - this can be configured\n    return 'http://localhost:5001';\n  }\n\n  /**\n   * Set the fingerprint service URL manually\n   */\n  setServiceUrl(url) {\n    this.baseUrl = url;\n    this.isConnected = false;\n  }\n\n  /**\n   * Check if the fingerprint service is available\n   */\n  async checkConnection() {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/fingerprint/status`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        // Add timeout\n        signal: AbortSignal.timeout(5000)\n      });\n      if (response.ok) {\n        const data = await response.json();\n        this.isConnected = true;\n        this.lastError = null;\n        return {\n          connected: true,\n          status: data\n        };\n      } else {\n        throw new Error(`Service responded with status: ${response.status}`);\n      }\n    } catch (error) {\n      this.isConnected = false;\n      this.lastError = error.message;\n      return {\n        connected: false,\n        error: error.message,\n        suggestion: this.getConnectionSuggestion(error)\n      };\n    }\n  }\n\n  /**\n   * Get connection suggestion based on error type\n   */\n  getConnectionSuggestion(error) {\n    if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {\n      return 'Make sure the Windows fingerprint service is running and accessible on the network.';\n    }\n    if (error.message.includes('timeout')) {\n      return 'The fingerprint service is taking too long to respond. Check network connectivity.';\n    }\n    return 'Unable to connect to the fingerprint service. Please check the service status.';\n  }\n\n  /**\n   * Initialize the fingerprint device\n   */\n  async initializeDevice() {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/fingerprint/initialize`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: AbortSignal.timeout(10000)\n      });\n      const data = await response.json();\n      if (response.ok) {\n        return {\n          success: true,\n          message: data.message\n        };\n      } else {\n        throw new Error(data.error || 'Failed to initialize device');\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Capture a fingerprint\n   */\n  async captureFingerprint() {\n    try {\n      // First check connection\n      const connectionCheck = await this.checkConnection();\n      if (!connectionCheck.connected) {\n        throw new Error(`Service not available: ${connectionCheck.error}`);\n      }\n      const response = await fetch(`${this.baseUrl}/api/fingerprint/capture`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: AbortSignal.timeout(30000) // 30 second timeout for capture\n      });\n      const data = await response.json();\n      if (response.ok) {\n        return {\n          success: true,\n          template: data.template,\n          timestamp: data.timestamp\n        };\n      } else {\n        throw new Error(data.error || 'Failed to capture fingerprint');\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message,\n        suggestion: this.getCaptureSuggestion(error)\n      };\n    }\n  }\n\n  /**\n   * Get capture suggestion based on error type\n   */\n  getCaptureSuggestion(error) {\n    if (error.message.includes('timeout')) {\n      return 'Fingerprint capture timed out. Please place your finger on the scanner and try again.';\n    }\n    if (error.message.includes('Device not opened')) {\n      return 'The fingerprint device is not properly initialized. Please check the device connection.';\n    }\n    if (error.message.includes('Failed to capture image')) {\n      return 'Unable to capture fingerprint image. Please clean the scanner and try again.';\n    }\n    return 'Please ensure your finger is properly placed on the scanner and try again.';\n  }\n\n  /**\n   * Match two fingerprint templates\n   */\n  async matchTemplates(template1, template2) {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/fingerprint/match`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          template1: template1,\n          template2: template2\n        }),\n        signal: AbortSignal.timeout(10000)\n      });\n      const data = await response.json();\n      if (response.ok) {\n        return {\n          success: true,\n          matched: data.matched,\n          timestamp: data.timestamp\n        };\n      } else {\n        throw new Error(data.error || 'Failed to match templates');\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Simulate fingerprint capture (fallback when service is not available)\n   */\n  simulateFingerprint() {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        // Generate a mock template\n        const mockTemplate = btoa(`mock_template_${Date.now()}_${Math.random()}`);\n        resolve({\n          success: true,\n          template: mockTemplate,\n          timestamp: Date.now(),\n          simulated: true\n        });\n      }, 2000); // Simulate 2-second capture time\n    });\n  }\n\n  /**\n   * Get service information\n   */\n  getServiceInfo() {\n    return {\n      baseUrl: this.baseUrl,\n      isConnected: this.isConnected,\n      lastError: this.lastError\n    };\n  }\n\n  /**\n   * Auto-detect and configure service URL from network\n   */\n  async autoDetectService() {\n    const possibleUrls = ['http://localhost:5001', 'http://127.0.0.1:5001', 'http://192.168.1.100:5001', 'http://192.168.1.101:5001', 'http://192.168.1.102:5001', 'http://192.168.0.100:5001', 'http://192.168.0.101:5001', 'http://192.168.0.102:5001', 'http://10.0.0.100:5001', 'http://10.0.0.101:5001', 'http://10.0.0.102:5001'];\n    for (const url of possibleUrls) {\n      try {\n        this.setServiceUrl(url);\n        const result = await this.checkConnection();\n        if (result.connected) {\n          console.log(`Fingerprint service found at: ${url}`);\n          return {\n            success: true,\n            url: url,\n            status: result.status\n          };\n        }\n      } catch (error) {\n        // Continue to next URL\n        continue;\n      }\n    }\n    return {\n      success: false,\n      error: 'No fingerprint service found on the network'\n    };\n  }\n}\n\n// Create singleton instance\nconst fingerprintService = new FingerprintService();\nexport default fingerprintService;","map":{"version":3,"names":["FingerprintService","constructor","baseUrl","detectFingerprintServiceUrl","isConnected","lastError","hostname","window","location","possibleIPs","setServiceUrl","url","checkConnection","response","fetch","method","headers","signal","AbortSignal","timeout","ok","data","json","connected","status","Error","error","message","suggestion","getConnectionSuggestion","includes","initializeDevice","success","captureFingerprint","connectionCheck","template","timestamp","getCaptureSuggestion","matchTemplates","template1","template2","body","JSON","stringify","matched","simulateFingerprint","Promise","resolve","setTimeout","mockTemplate","btoa","Date","now","Math","random","simulated","getServiceInfo","autoDetectService","possibleUrls","result","console","log","fingerprintService"],"sources":["/Users/omar/Documents/augment-projects/Tyler-Code/src/utils/FingerprintService.js"],"sourcesContent":["/**\n * Fingerprint Service Client\n * Communicates with the Windows fingerprint service running on the local network\n */\n\nclass FingerprintService {\n  constructor() {\n    // Default to localhost, but can be configured for network access\n    this.baseUrl = this.detectFingerprintServiceUrl();\n    this.isConnected = false;\n    this.lastError = null;\n  }\n\n  /**\n   * Detect the fingerprint service URL\n   * Tries localhost first, then attempts to detect network service\n   */\n  detectFingerprintServiceUrl() {\n    // Check if we're running on the same machine as the fingerprint service\n    const hostname = window.location.hostname;\n    \n    // If accessing from localhost/127.0.0.1, try localhost first\n    if (hostname === 'localhost' || hostname === '127.0.0.1') {\n      return 'http://localhost:5001';\n    }\n    \n    // If accessing from network, try to detect Windows PC IP\n    // This can be configured based on your network setup\n    const possibleIPs = [\n      'http://192.168.1.100:5001',  // Common router IP range\n      'http://192.168.0.100:5001',  // Alternative router IP range\n      'http://10.0.0.100:5001',     // Another common range\n      'http://localhost:5001'       // Fallback to localhost\n    ];\n    \n    // For now, return localhost - this can be configured\n    return 'http://localhost:5001';\n  }\n\n  /**\n   * Set the fingerprint service URL manually\n   */\n  setServiceUrl(url) {\n    this.baseUrl = url;\n    this.isConnected = false;\n  }\n\n  /**\n   * Check if the fingerprint service is available\n   */\n  async checkConnection() {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/fingerprint/status`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        // Add timeout\n        signal: AbortSignal.timeout(5000)\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        this.isConnected = true;\n        this.lastError = null;\n        return {\n          connected: true,\n          status: data\n        };\n      } else {\n        throw new Error(`Service responded with status: ${response.status}`);\n      }\n    } catch (error) {\n      this.isConnected = false;\n      this.lastError = error.message;\n      \n      return {\n        connected: false,\n        error: error.message,\n        suggestion: this.getConnectionSuggestion(error)\n      };\n    }\n  }\n\n  /**\n   * Get connection suggestion based on error type\n   */\n  getConnectionSuggestion(error) {\n    if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {\n      return 'Make sure the Windows fingerprint service is running and accessible on the network.';\n    }\n    if (error.message.includes('timeout')) {\n      return 'The fingerprint service is taking too long to respond. Check network connectivity.';\n    }\n    return 'Unable to connect to the fingerprint service. Please check the service status.';\n  }\n\n  /**\n   * Initialize the fingerprint device\n   */\n  async initializeDevice() {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/fingerprint/initialize`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        signal: AbortSignal.timeout(10000)\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        return {\n          success: true,\n          message: data.message\n        };\n      } else {\n        throw new Error(data.error || 'Failed to initialize device');\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Capture a fingerprint\n   */\n  async captureFingerprint() {\n    try {\n      // First check connection\n      const connectionCheck = await this.checkConnection();\n      if (!connectionCheck.connected) {\n        throw new Error(`Service not available: ${connectionCheck.error}`);\n      }\n\n      const response = await fetch(`${this.baseUrl}/api/fingerprint/capture`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        signal: AbortSignal.timeout(30000) // 30 second timeout for capture\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        return {\n          success: true,\n          template: data.template,\n          timestamp: data.timestamp\n        };\n      } else {\n        throw new Error(data.error || 'Failed to capture fingerprint');\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message,\n        suggestion: this.getCaptureSuggestion(error)\n      };\n    }\n  }\n\n  /**\n   * Get capture suggestion based on error type\n   */\n  getCaptureSuggestion(error) {\n    if (error.message.includes('timeout')) {\n      return 'Fingerprint capture timed out. Please place your finger on the scanner and try again.';\n    }\n    if (error.message.includes('Device not opened')) {\n      return 'The fingerprint device is not properly initialized. Please check the device connection.';\n    }\n    if (error.message.includes('Failed to capture image')) {\n      return 'Unable to capture fingerprint image. Please clean the scanner and try again.';\n    }\n    return 'Please ensure your finger is properly placed on the scanner and try again.';\n  }\n\n  /**\n   * Match two fingerprint templates\n   */\n  async matchTemplates(template1, template2) {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/fingerprint/match`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          template1: template1,\n          template2: template2\n        }),\n        signal: AbortSignal.timeout(10000)\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        return {\n          success: true,\n          matched: data.matched,\n          timestamp: data.timestamp\n        };\n      } else {\n        throw new Error(data.error || 'Failed to match templates');\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Simulate fingerprint capture (fallback when service is not available)\n   */\n  simulateFingerprint() {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        // Generate a mock template\n        const mockTemplate = btoa(`mock_template_${Date.now()}_${Math.random()}`);\n        resolve({\n          success: true,\n          template: mockTemplate,\n          timestamp: Date.now(),\n          simulated: true\n        });\n      }, 2000); // Simulate 2-second capture time\n    });\n  }\n\n  /**\n   * Get service information\n   */\n  getServiceInfo() {\n    return {\n      baseUrl: this.baseUrl,\n      isConnected: this.isConnected,\n      lastError: this.lastError\n    };\n  }\n\n  /**\n   * Auto-detect and configure service URL from network\n   */\n  async autoDetectService() {\n    const possibleUrls = [\n      'http://localhost:5001',\n      'http://127.0.0.1:5001',\n      'http://192.168.1.100:5001',\n      'http://192.168.1.101:5001',\n      'http://192.168.1.102:5001',\n      'http://192.168.0.100:5001',\n      'http://192.168.0.101:5001',\n      'http://192.168.0.102:5001',\n      'http://10.0.0.100:5001',\n      'http://10.0.0.101:5001',\n      'http://10.0.0.102:5001'\n    ];\n\n    for (const url of possibleUrls) {\n      try {\n        this.setServiceUrl(url);\n        const result = await this.checkConnection();\n        if (result.connected) {\n          console.log(`Fingerprint service found at: ${url}`);\n          return {\n            success: true,\n            url: url,\n            status: result.status\n          };\n        }\n      } catch (error) {\n        // Continue to next URL\n        continue;\n      }\n    }\n\n    return {\n      success: false,\n      error: 'No fingerprint service found on the network'\n    };\n  }\n}\n\n// Create singleton instance\nconst fingerprintService = new FingerprintService();\n\nexport default fingerprintService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}